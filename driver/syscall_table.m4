/*

Copyright (C) 2021 The Falco Authors.

This file is dual licensed under either the MIT or GPL 2. See MIT.txt
or GPL2.txt for full copies of the license.

*/

#ifdef __KERNEL__
#include <linux/kobject.h>
#include <linux/cdev.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/kdev_t.h>
#include <linux/delay.h>
#include <linux/proc_fs.h>
#include <linux/sched.h>
#include <linux/version.h>
#include <linux/wait.h>
#include <net/sock.h>
#include <asm/unistd.h>
#if LINUX_VERSION_CODE <= KERNEL_VERSION(2, 6, 20)
#include "ppm_syscall.h"
#else
#include <asm/syscall.h>
#endif
#else /* __KERNEL__ */

#ifdef WDIG
#include <syscall.h>
#else /* WDIG */
#ifdef UDIG
#include <sys/syscall.h>
#else  /* UDIG */
#include <linux/unistd.h>
#endif /* UDIG */
#endif /* WDIG */
#ifdef __mips__
#define SYSCALL_TABLE_ID0 __NR_Linux
#else /* __mips__ */
#define SYSCALL_TABLE_ID0 0
#endif /* __mips__ */
#endif /* __KERNEL__ */


#include "ppm_events_public.h"
#ifdef __KERNEL__
#include "ppm.h"
#if defined(CONFIG_IA32_EMULATION) && !defined(__NR_ia32_socketcall)
#include "ppm_compat_unistd_32.h"
#endif
#endif /* __KERNEL__ */

/*
 * List of supported syscalls, used for both __NR_x ones and __NR_ia32_x ones.
 *
 * Meanings:
 * SYSCALL() macro -> declare a syscall with attached flags, events and ppm_sc code, only if the __NR_(ia32_)symbol is defined.
 * SOCKETCALL() macro -> same as SYSCALL but check for __NR_(ia32_)socketcall symbol defined instead (it is used by various socket related syscalls)
 * SYSCALL_NO_EV() -> mapped syscalls (where defined) that have no flags and no events; the macro will create an entry with only ppm_code set to PPM_SC_$upper($syscall_name),
 * useful when mapping a new syscall that only has a PPM_SC_ code, but no real events attached.
 *
 * Ideally, you'd most probably want to use the SYSCALL() macro.
 *
 * Append your new syscall below, any position is good (as the index is the syscall nr anyway)
 */
define(`X_SYSCALLS', `
    SYSCALL(open, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_OPEN_E, PPME_SYSCALL_OPEN_X, PPM_SC_OPEN') \
    SYSCALL(creat, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_CREAT_E, PPME_SYSCALL_CREAT_X,PPM_SC_CREAT') \
    SYSCALL(close, `UF_USED | UF_NEVER_DROP | UF_SIMPLEDRIVER_KEEP, PPME_SYSCALL_CLOSE_E, PPME_SYSCALL_CLOSE_X, PPM_SC_CLOSE') \
    SYSCALL(brk, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_BRK_4_E, PPME_SYSCALL_BRK_4_X, PPM_SC_BRK') \
    SYSCALL(read, `UF_USED, PPME_SYSCALL_READ_E, PPME_SYSCALL_READ_X, PPM_SC_READ') \
    SYSCALL(write, `UF_USED, PPME_SYSCALL_WRITE_E, PPME_SYSCALL_WRITE_X, PPM_SC_WRITE') \
    SYSCALL(execve, `UF_USED | UF_NEVER_DROP | UF_SIMPLEDRIVER_KEEP, PPME_SYSCALL_EXECVE_19_E, PPME_SYSCALL_EXECVE_19_X, PPM_SC_EXECVE') \
    SYSCALL(clone, `UF_USED | UF_NEVER_DROP | UF_SIMPLEDRIVER_KEEP, PPME_SYSCALL_CLONE_20_E, PPME_SYSCALL_CLONE_20_X') \
    SYSCALL(fork, `UF_USED | UF_NEVER_DROP | UF_SIMPLEDRIVER_KEEP, PPME_SYSCALL_FORK_20_E, PPME_SYSCALL_FORK_20_X, PPM_SC_FORK') \
    SYSCALL(vfork, `UF_USED | UF_NEVER_DROP | UF_SIMPLEDRIVER_KEEP, PPME_SYSCALL_VFORK_20_E, PPME_SYSCALL_VFORK_20_X, PPM_SC_VFORK') \
    SYSCALL(pipe, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_PIPE_E, PPME_SYSCALL_PIPE_X, PPM_SC_PIPE') \
    SYSCALL(pipe2, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_PIPE_E, PPME_SYSCALL_PIPE_X, PPM_SC_PIPE2') \
    SYSCALL(eventfd, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_EVENTFD_E, PPME_SYSCALL_EVENTFD_X, PPM_SC_EVENTFD') \
    SYSCALL(eventfd2, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_EVENTFD_E, PPME_SYSCALL_EVENTFD_X, PPM_SC_EVENTFD2') \
    SYSCALL(futex, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_FUTEX_E, PPME_SYSCALL_FUTEX_X, PPM_SC_FUTEX') \
    SYSCALL(stat, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_STAT_E, PPME_SYSCALL_STAT_X, PPM_SC_STAT') \
    SYSCALL(lstat, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_LSTAT_E, PPME_SYSCALL_LSTAT_X, PPM_SC_LSTAT') \
    SYSCALL(fstat, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_FSTAT_E, PPME_SYSCALL_FSTAT_X, PPM_SC_FSTAT') \
    SYSCALL(epoll_wait, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_EPOLLWAIT_E, PPME_SYSCALL_EPOLLWAIT_X, PPM_SC_EPOLL_WAIT') \
    SYSCALL(poll, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_POLL_E, PPME_SYSCALL_POLL_X, PPM_SC_POLL') \
    SYSCALL(select, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_SELECT_E, PPME_SYSCALL_SELECT_X, PPM_SC_SELECT') \
    SYSCALL(lseek, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_LSEEK_E, PPME_SYSCALL_LSEEK_X, PPM_SC_LSEEK') \
    SYSCALL(ioctl, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_IOCTL_3_E, PPME_SYSCALL_IOCTL_3_X, PPM_SC_IOCTL') \
    SYSCALL(getcwd, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_GETCWD_E, PPME_SYSCALL_GETCWD_X, PPM_SC_GETCWD') \
    SYSCALL(chdir, `UF_USED | UF_NEVER_DROP | UF_SIMPLEDRIVER_KEEP, PPME_SYSCALL_CHDIR_E, PPME_SYSCALL_CHDIR_X, PPM_SC_CHDIR') \
    SYSCALL(fchdir, `UF_USED | UF_NEVER_DROP | UF_SIMPLEDRIVER_KEEP, PPME_SYSCALL_FCHDIR_E, PPME_SYSCALL_FCHDIR_X, PPM_SC_FCHDIR') \
    SYSCALL(mkdir, `UF_USED, PPME_SYSCALL_MKDIR_2_E, PPME_SYSCALL_MKDIR_2_X, PPM_SC_MKDIR') \
    SYSCALL(rmdir, `UF_USED, PPME_SYSCALL_RMDIR_2_E, PPME_SYSCALL_RMDIR_2_X, PPM_SC_RMDIR') \
    SYSCALL(openat, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_OPENAT_2_E, PPME_SYSCALL_OPENAT_2_X, PPM_SC_OPENAT') \
    SYSCALL(mkdirat, `UF_USED, PPME_SYSCALL_MKDIRAT_E, PPME_SYSCALL_MKDIRAT_X, PPM_SC_MKDIRAT') \
    SYSCALL(link, `UF_USED, PPME_SYSCALL_LINK_2_E, PPME_SYSCALL_LINK_2_X, PPM_SC_LINK') \
    SYSCALL(linkat, `UF_USED, PPME_SYSCALL_LINKAT_2_E, PPME_SYSCALL_LINKAT_2_X, PPM_SC_LINKAT') \
    SYSCALL(unlink, `UF_USED, PPME_SYSCALL_UNLINK_2_E, PPME_SYSCALL_UNLINK_2_X, PPM_SC_UNLINK') \
    SYSCALL(unlinkat, `UF_USED, PPME_SYSCALL_UNLINKAT_2_E, PPME_SYSCALL_UNLINKAT_2_X, PPM_SC_UNLINKAT') \
    SYSCALL(pread64, `UF_USED, PPME_SYSCALL_PREAD_E, PPME_SYSCALL_PREAD_X, PPM_SC_PREAD64') \
    SYSCALL(pwrite64, `UF_USED, PPME_SYSCALL_PWRITE_E, PPME_SYSCALL_PWRITE_X, PPM_SC_PWRITE64') \
    SYSCALL(readv, `UF_USED, PPME_SYSCALL_READV_E, PPME_SYSCALL_READV_X, PPM_SC_READV') \
    SYSCALL(writev, `UF_USED, PPME_SYSCALL_WRITEV_E, PPME_SYSCALL_WRITEV_X, PPM_SC_WRITEV') \
    SYSCALL(preadv, `UF_USED, PPME_SYSCALL_PREADV_E, PPME_SYSCALL_PREADV_X, PPM_SC_PREADV') \
    SYSCALL(pwritev, `UF_USED, PPME_SYSCALL_PWRITEV_E, PPME_SYSCALL_PWRITEV_X, PPM_SC_PWRITEV') \
    SYSCALL(dup, `UF_USED | UF_NEVER_DROP | UF_SIMPLEDRIVER_KEEP, PPME_SYSCALL_DUP_E, PPME_SYSCALL_DUP_X, PPM_SC_DUP')  \
    SYSCALL(dup2, `UF_USED | UF_NEVER_DROP | UF_SIMPLEDRIVER_KEEP, PPME_SYSCALL_DUP_E, PPME_SYSCALL_DUP_X, PPM_SC_DUP2') \
    SYSCALL(dup3, `UF_USED | UF_NEVER_DROP | UF_SIMPLEDRIVER_KEEP, PPME_SYSCALL_DUP_E, PPME_SYSCALL_DUP_X, PPM_SC_DUP3') \
    SYSCALL(signalfd, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_SIGNALFD_E, PPME_SYSCALL_SIGNALFD_X, PPM_SC_SIGNALFD') \
    SYSCALL(signalfd4, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_SIGNALFD_E, PPME_SYSCALL_SIGNALFD_X, PPM_SC_SIGNALFD4') \
    SYSCALL(kill, `UF_USED, PPME_SYSCALL_KILL_E, PPME_SYSCALL_KILL_X, PPM_SC_KILL') \
    SYSCALL(tkill, `UF_USED, PPME_SYSCALL_TKILL_E, PPME_SYSCALL_TKILL_X, PPM_SC_TKILL') \
    SYSCALL(tgkill, `UF_USED, PPME_SYSCALL_TGKILL_E, PPME_SYSCALL_TGKILL_X, PPM_SC_TGKILL') \
    SYSCALL(nanosleep, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_NANOSLEEP_E, PPME_SYSCALL_NANOSLEEP_X, PPM_SC_NANOSLEEP') \
    SYSCALL(timerfd_create, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_TIMERFD_CREATE_E, PPME_SYSCALL_TIMERFD_CREATE_X, PPM_SC_TIMERFD_CREATE') \
    SYSCALL(inotify_init, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_INOTIFY_INIT_E, PPME_SYSCALL_INOTIFY_INIT_X, PPM_SC_INOTIFY_INIT') \
    SYSCALL(inotify_init1, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_INOTIFY_INIT_E, PPME_SYSCALL_INOTIFY_INIT_X, PPM_SC_INOTIFY_INIT1') \
    SYSCALL(fchmodat, `UF_USED, PPME_SYSCALL_FCHMODAT_E, PPME_SYSCALL_FCHMODAT_X, PPM_SC_FCHMODAT') \
    SYSCALL(fchmod, `UF_USED, PPME_SYSCALL_FCHMOD_E, PPME_SYSCALL_FCHMOD_X, PPM_SC_FCHMOD') \
    SYSCALL(getrlimit, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_GETRLIMIT_E, PPME_SYSCALL_GETRLIMIT_X, PPM_SC_GETRLIMIT') \
    SYSCALL(setrlimit, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_SETRLIMIT_E, PPME_SYSCALL_SETRLIMIT_X, PPM_SC_SETRLIMIT') \
    SYSCALL(prlimit64, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_PRLIMIT_E, PPME_SYSCALL_PRLIMIT_X, PPM_SC_PRLIMIT64') \
    SYSCALL(ugetrlimit, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_GETRLIMIT_E, PPME_SYSCALL_GETRLIMIT_X, PPM_SC_UGETRLIMIT') \
    SYSCALL(fcntl, `UF_USED, PPME_SYSCALL_FCNTL_E, PPME_SYSCALL_FCNTL_X, PPM_SC_FCNTL') \
    SYSCALL(fcntl64, `UF_USED, PPME_SYSCALL_FCNTL_E, PPME_SYSCALL_FCNTL_X, PPM_SC_FCNTL64') \
    SYSCALL(pselect6, `UF_USED | UF_ALWAYS_DROP, PPME_GENERIC_E, PPME_GENERIC_X, PPM_SC_PSELECT6') \
    SYSCALL(epoll_create, `UF_USED | UF_ALWAYS_DROP, PPME_GENERIC_E, PPME_GENERIC_X, PPM_SC_EPOLL_CREATE') \
    SYSCALL(epoll_ctl, `UF_USED | UF_ALWAYS_DROP, PPME_GENERIC_E, PPME_GENERIC_X, PPM_SC_EPOLL_CTL') \
    SYSCALL(uselib, `UF_USED | UF_ALWAYS_DROP, PPME_GENERIC_E, PPME_GENERIC_X, PPM_SC_USELIB') \
    SYSCALL(sched_setparam, `UF_USED | UF_ALWAYS_DROP, PPME_GENERIC_E, PPME_GENERIC_X, PPM_SC_SCHED_SETPARAM') \
    SYSCALL(sched_getparam, `UF_USED | UF_ALWAYS_DROP, PPME_GENERIC_E, PPME_GENERIC_X, PPM_SC_SCHED_GETPARAM') \
    SYSCALL(syslog, `UF_USED | UF_ALWAYS_DROP, PPME_GENERIC_E, PPME_GENERIC_X, PPM_SC_SYSLOG') \
    SYSCALL(chmod, `UF_USED, PPME_SYSCALL_CHMOD_E, PPME_SYSCALL_CHMOD_X, PPM_SC_CHMOD') \
    SYSCALL(lchown, `UF_USED, PPME_GENERIC_E, PPME_GENERIC_X, PPM_SC_LCHOWN')  \
    SYSCALL(utime, `UF_USED | UF_ALWAYS_DROP, PPME_GENERIC_E, PPME_GENERIC_X, PPM_SC_UTIME') \
    SYSCALL(mount, `UF_USED, PPME_SYSCALL_MOUNT_E, PPME_SYSCALL_MOUNT_X, PPM_SC_MOUNT') \
    SYSCALL(umount2, `UF_USED, PPME_SYSCALL_UMOUNT_E, PPME_SYSCALL_UMOUNT_X, PPM_SC_UMOUNT2') \
    SYSCALL(ptrace, `UF_USED, PPME_SYSCALL_PTRACE_E, PPME_SYSCALL_PTRACE_X, PPM_SC_PTRACE') \
    SYSCALL(alarm, `UF_USED | UF_ALWAYS_DROP, PPME_GENERIC_E, PPME_GENERIC_X, PPM_SC_ALARM') \
    SYSCALL(pause, `UF_USED | UF_ALWAYS_DROP, PPME_GENERIC_E, PPME_GENERIC_X, PPM_SC_PAUSE') \
    SOCKETCALL(socket, `UF_USED | UF_NEVER_DROP | UF_SIMPLEDRIVER_KEEP, PPME_SOCKET_SOCKET_E, PPME_SOCKET_SOCKET_X, PPM_SC_SOCKET') \
    SOCKETCALL(bind, `UF_USED | UF_NEVER_DROP, PPME_SOCKET_BIND_E,  PPME_SOCKET_BIND_X, PPM_SC_BIND') \
    SOCKETCALL(connect, `UF_USED | UF_SIMPLEDRIVER_KEEP, PPME_SOCKET_CONNECT_E, PPME_SOCKET_CONNECT_X, PPM_SC_CONNECT') \
    SOCKETCALL(listen, `UF_USED, PPME_SOCKET_LISTEN_E, PPME_SOCKET_LISTEN_X, PPM_SC_LISTEN') \
    SOCKETCALL(accept, `UF_USED | UF_SIMPLEDRIVER_KEEP, PPME_SOCKET_ACCEPT_5_E, PPME_SOCKET_ACCEPT_5_X, PPM_SC_ACCEPT') \
    SOCKETCALL(getsockname, `UF_USED | UF_ALWAYS_DROP, PPME_SOCKET_GETSOCKNAME_E, PPME_SOCKET_GETSOCKNAME_X, PPM_SC_GETSOCKNAME') \
    SOCKETCALL(getpeername, `UF_USED | UF_ALWAYS_DROP, PPME_SOCKET_GETPEERNAME_E, PPME_SOCKET_GETPEERNAME_X, PPM_SC_GETPEERNAME') \
    SOCKETCALL(socketpair, `UF_USED | UF_NEVER_DROP, PPME_SOCKET_SOCKETPAIR_E, PPME_SOCKET_SOCKETPAIR_X, PPM_SC_SOCKETPAIR') \
    SOCKETCALL(sendto, `UF_USED, PPME_SOCKET_SENDTO_E, PPME_SOCKET_SENDTO_X, PPM_SC_SENDTO') \
    SOCKETCALL(recvfrom, `UF_USED, PPME_SOCKET_RECVFROM_E, PPME_SOCKET_RECVFROM_X, PPM_SC_RECVFROM') \
    SOCKETCALL(shutdown, `UF_USED, PPME_SOCKET_SHUTDOWN_E, PPME_SOCKET_SHUTDOWN_X, PPM_SC_SHUTDOWN') \
    SOCKETCALL(setsockopt, `UF_USED | UF_ALWAYS_DROP, PPME_SOCKET_SETSOCKOPT_E, PPME_SOCKET_SETSOCKOPT_X, PPM_SC_SETSOCKOPT') \
    SOCKETCALL(getsockopt, `UF_USED, PPME_SOCKET_GETSOCKOPT_E, PPME_SOCKET_GETSOCKOPT_X, PPM_SC_GETSOCKOPT') \
    SOCKETCALL(sendmsg, `UF_USED, PPME_SOCKET_SENDMSG_E, PPME_SOCKET_SENDMSG_X, PPM_SC_SENDMSG') \
    SOCKETCALL(accept4, `UF_USED | UF_SIMPLEDRIVER_KEEP, PPME_SOCKET_ACCEPT4_5_E, PPME_SOCKET_ACCEPT4_5_X, PPM_SC_ACCEPT4') \
    SYSCALL(socketcall, `.ppm_code = PPM_SC_SOCKETCALL') \
    SYSCALL(sendmmsg, `UF_USED, PPME_SOCKET_SENDMMSG_E, PPME_SOCKET_SENDMMSG_X, PPM_SC_SENDMMSG') \
    SYSCALL(recvmsg, `UF_USED, PPME_SOCKET_RECVMSG_E, PPME_SOCKET_RECVMSG_X, PPM_SC_RECVMSG') \
    SYSCALL(recvmmsg, `UF_USED, PPME_SOCKET_RECVMMSG_E, PPME_SOCKET_RECVMMSG_X, PPM_SC_RECVMMSG') \
    SYSCALL(stat64, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_STAT64_E, PPME_SYSCALL_STAT64_X, PPM_SC_STAT64') \
    SYSCALL(fstat64, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_FSTAT64_E, PPME_SYSCALL_FSTAT64_X, PPM_SC_FSTAT64') \
    SYSCALL(llseek, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_LLSEEK_E, PPME_SYSCALL_LLSEEK_X, PPM_SC__LLSEEK') \
    SYSCALL(mmap, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_MMAP_E, PPME_SYSCALL_MMAP_X, PPM_SC_MMAP') \
    SYSCALL(mmap2, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_MMAP2_E, PPME_SYSCALL_MMAP2_X, PPM_SC_MMAP2') \
    SYSCALL(munmap, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_MUNMAP_E, PPME_SYSCALL_MUNMAP_X, PPM_SC_MUNMAP') \
    SYSCALL(splice, `UF_USED, PPME_SYSCALL_SPLICE_E, PPME_SYSCALL_SPLICE_X, PPM_SC_SPLICE') \
    SYSCALL(process_vm_readv, `UF_USED, PPME_GENERIC_E, PPME_GENERIC_X, PPM_SC_PROCESS_VM_READV') \
    SYSCALL(process_vm_writev, `UF_USED, PPME_GENERIC_E, PPME_GENERIC_X, PPM_SC_PROCESS_VM_WRITEV') \
    SYSCALL(rename, `UF_USED, PPME_SYSCALL_RENAME_E, PPME_SYSCALL_RENAME_X, PPM_SC_RENAME') \
    SYSCALL(renameat, `UF_USED, PPME_SYSCALL_RENAMEAT_E, PPME_SYSCALL_RENAMEAT_X, PPM_SC_RENAMEAT') \
    SYSCALL(symlink, `UF_USED, PPME_SYSCALL_SYMLINK_E, PPME_SYSCALL_SYMLINK_X, PPM_SC_SYMLINK') \
    SYSCALL(symlinkat, `UF_USED, PPME_SYSCALL_SYMLINKAT_E, PPME_SYSCALL_SYMLINKAT_X, PPM_SC_SYMLINKAT') \
    SYSCALL(sendfile, `UF_USED, PPME_SYSCALL_SENDFILE_E, PPME_SYSCALL_SENDFILE_X, PPM_SC_SENDFILE') \
    SYSCALL(sendfile64, `UF_USED, PPME_SYSCALL_SENDFILE_E, PPME_SYSCALL_SENDFILE_X, PPM_SC_SENDFILE64') \
    SYSCALL(quotactl, `UF_USED, PPME_SYSCALL_QUOTACTL_E, PPME_SYSCALL_QUOTACTL_X, PPM_SC_QUOTACTL') \
    SYSCALL(setresuid, `UF_USED, PPME_SYSCALL_SETRESUID_E, PPME_SYSCALL_SETRESUID_X, PPM_SC_SETRESUID') \
    SYSCALL(setresuid32, `UF_USED, PPME_SYSCALL_SETRESUID_E, PPME_SYSCALL_SETRESUID_X, PPM_SC_SETRESUID')  \
    SYSCALL(setresgid, `UF_USED, PPME_SYSCALL_SETRESGID_E, PPME_SYSCALL_SETRESGID_X, PPM_SC_SETRESGID') \
    SYSCALL(setresgid32, `UF_USED, PPME_SYSCALL_SETRESGID_E, PPME_SYSCALL_SETRESGID_X, PPM_SC_SETRESGID') \
    SYSCALL(setuid, `UF_USED, PPME_SYSCALL_SETUID_E, PPME_SYSCALL_SETUID_X, PPM_SC_SETUID') \
    SYSCALL(setuid32, `UF_USED, PPME_SYSCALL_SETUID_E, PPME_SYSCALL_SETUID_X, PPM_SC_SETUID32') \
    SYSCALL(setgid, `UF_USED, PPME_SYSCALL_SETGID_E, PPME_SYSCALL_SETGID_X, PPM_SC_SETGID') \
    SYSCALL(setgid32, `UF_USED, PPME_SYSCALL_SETGID_E, PPME_SYSCALL_SETGID_X, PPM_SC_SETGID32') \
    SYSCALL(getuid, `UF_USED, PPME_SYSCALL_GETUID_E, PPME_SYSCALL_GETUID_X, PPM_SC_GETUID') \
    SYSCALL(getuid32, `UF_USED, PPME_SYSCALL_GETUID_E, PPME_SYSCALL_GETUID_X, PPM_SC_GETUID32') \
    SYSCALL(geteuid, `UF_USED, PPME_SYSCALL_GETEUID_E, PPME_SYSCALL_GETEUID_X, PPM_SC_GETEUID') \
    SYSCALL(geteuid32, `UF_USED, PPME_SYSCALL_GETEUID_E, PPME_SYSCALL_GETEUID_X, PPM_SC_GETEUID') \
    SYSCALL(getgid, `UF_USED, PPME_SYSCALL_GETGID_E, PPME_SYSCALL_GETGID_X, PPM_SC_GETGID') \
    SYSCALL(getgid32, `UF_USED, PPME_SYSCALL_GETGID_E, PPME_SYSCALL_GETGID_X, PPM_SC_GETGID') \
    SYSCALL(getegid, `UF_USED, PPME_SYSCALL_GETEGID_E, PPME_SYSCALL_GETEGID_X, PPM_SC_GETEGID') \
    SYSCALL(getegid32, `UF_USED, PPME_SYSCALL_GETEGID_E, PPME_SYSCALL_GETEGID_X, PPM_SC_GETEGID') \
    SYSCALL(getresuid, `UF_USED, PPME_SYSCALL_GETRESUID_E, PPME_SYSCALL_GETRESUID_X, PPM_SC_GETRESUID') \
    SYSCALL(getresuid32, `UF_USED, PPME_SYSCALL_GETRESUID_E, PPME_SYSCALL_GETRESUID_X, PPM_SC_GETRESUID32') \
    SYSCALL(getresgid, `UF_USED, PPME_SYSCALL_GETRESGID_E, PPME_SYSCALL_GETRESGID_X, PPM_SC_GETRESGID') \
    SYSCALL(getresgid32, `UF_USED, PPME_SYSCALL_GETRESGID_E, PPME_SYSCALL_GETRESGID_X, PPM_SC_GETRESGID32') \
    SYSCALL(getdents, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_GETDENTS_E, PPME_SYSCALL_GETDENTS_X, PPM_SC_GETDENTS') \
    SYSCALL(getdents64, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_GETDENTS64_E, PPME_SYSCALL_GETDENTS64_X, PPM_SC_GETDENTS64') \
    SYSCALL(setns, `UF_USED, PPME_SYSCALL_SETNS_E, PPME_SYSCALL_SETNS_X, PPM_SC_SETNS') \
    SYSCALL(unshare, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_UNSHARE_E, PPME_SYSCALL_UNSHARE_X, PPM_SC_UNSHARE') \
    SYSCALL(flock, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_FLOCK_E, PPME_SYSCALL_FLOCK_X, PPM_SC_FLOCK') \
    SYSCALL(semop, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_SEMOP_E, PPME_SYSCALL_SEMOP_X, PPM_SC_SEMOP') \
    SYSCALL(semget, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_SEMGET_E, PPME_SYSCALL_SEMGET_X, PPM_SC_SEMGET') \
    SYSCALL(semctl, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_SEMCTL_E, PPME_SYSCALL_SEMCTL_X, PPM_SC_SEMCTL') \
    SYSCALL(ppoll, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_PPOLL_E, PPME_SYSCALL_PPOLL_X, PPM_SC_PPOLL') \
    SYSCALL(access, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_ACCESS_E, PPME_SYSCALL_ACCESS_X, PPM_SC_ACCESS') \
    SYSCALL(chroot, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_CHROOT_E, PPME_SYSCALL_CHROOT_X, PPM_SC_CHROOT') \
    SYSCALL(setsid, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_SETSID_E, PPME_SYSCALL_SETSID_X, PPM_SC_SETSID') \
    SYSCALL(setpgid, `UF_USED | UF_ALWAYS_DROP, PPME_SYSCALL_SETPGID_E, PPME_SYSCALL_SETPGID_X, PPM_SC_SETPGID') \
    SYSCALL(bpf, `UF_USED, PPME_SYSCALL_BPF_E, PPME_SYSCALL_BPF_X, PPM_SC_BPF') \
    SYSCALL(seccomp, `UF_USED, PPME_SYSCALL_SECCOMP_E, PPME_SYSCALL_SECCOMP_X, PPM_SC_SECCOMP')  \
    SYSCALL(renameat2, `UF_USED, PPME_SYSCALL_RENAMEAT2_E, PPME_SYSCALL_RENAMEAT2_X, PPM_SC_RENAMEAT2') \
    SYSCALL(userfaultfd, `UF_USED | UF_NEVER_DROP, PPME_SYSCALL_USERFAULTFD_E, PPME_SYSCALL_USERFAULTFD_X, PPM_SC_USERFAULTFD') \
    SYSCALL(openat2, `UF_USED, PPME_SYSCALL_OPENAT2_E, PPME_SYSCALL_OPENAT2_X, PPM_SC_OPENAT2') \
    SYSCALL(clone3, `UF_USED | UF_NEVER_DROP | UF_SIMPLEDRIVER_KEEP, PPME_SYSCALL_CLONE3_E, PPME_SYSCALL_CLONE3_X, PPM_SC_CLONE3') \
    SYSCALL(mprotect, `UF_USED, PPME_SYSCALL_MPROTECT_E, PPME_SYSCALL_MPROTECT_X, PPM_SC_MPROTECT') \
    SYSCALL(execveat, `UF_USED | UF_NEVER_DROP | UF_SIMPLEDRIVER_KEEP, PPME_SYSCALL_EXECVEAT_E, PPME_SYSCALL_EXECVEAT_X, PPM_SC_EXECVEAT') \
    SYSCALL(io_uring_setup, `UF_USED, PPME_SYSCALL_IO_URING_SETUP_E, PPME_SYSCALL_IO_URING_SETUP_X, PPM_SC_IO_URING_SETUP') \
    SYSCALL(io_uring_enter, `UF_USED, PPME_SYSCALL_IO_URING_ENTER_E, PPME_SYSCALL_IO_URING_ENTER_X, PPM_SC_IO_URING_ENTER') \
    SYSCALL(io_uring_register, `UF_USED, PPME_SYSCALL_IO_URING_REGISTER_E, PPME_SYSCALL_IO_URING_REGISTER_X, PPM_SC_IO_URING_REGISTER') \
    SYSCALL(copy_file_range, `UF_USED, PPME_SYSCALL_COPY_FILE_RANGE_E, PPME_SYSCALL_COPY_FILE_RANGE_X, PPM_SC_COPY_FILE_RANGE') \
    SYSCALL(open_by_handle_at, `UF_USED, PPME_SYSCALL_OPEN_BY_HANDLE_AT_E, PPME_SYSCALL_OPEN_BY_HANDLE_AT_X, PPM_SC_OPEN_BY_HANDLE_AT') \
    SYSCALL(mlock, `UF_USED, PPME_SYSCALL_MLOCK_E, PPME_SYSCALL_MLOCK_X, PPM_SC_MLOCK') \
    SYSCALL(munlock, `UF_USED, PPME_SYSCALL_MUNLOCK_E, PPME_SYSCALL_MUNLOCK_X, PPM_SC_MUNLOCK') \
    SYSCALL(mlockall, `UF_USED, PPME_SYSCALL_MLOCKALL_E, PPME_SYSCALL_MLOCKALL_X, PPM_SC_MLOCKALL') \
    SYSCALL(munlockall, `UF_USED, PPME_SYSCALL_MUNLOCKALL_E, PPME_SYSCALL_MUNLOCKALL_X, PPM_SC_MUNLOCKALL') \
    SYSCALL(capset, `UF_USED, PPME_SYSCALL_CAPSET_E, PPME_SYSCALL_CAPSET_X, PPM_SC_CAPSET') \
    SYSCALL_NO_EV(restart_syscall) \
    SYSCALL_NO_EV(exit) \
    SYSCALL_NO_EV(time) \
    SYSCALL_NO_EV(mknod) \
    SYSCALL_NO_EV(getpid) \
    SYSCALL_NO_EV(sync) \
    SYSCALL_NO_EV(times) \
    SYSCALL_NO_EV(acct) \
    SYSCALL_NO_EV(umask) \
    SYSCALL_NO_EV(ustat) \
    SYSCALL_NO_EV(getppid) \
    SYSCALL_NO_EV(getpgrp) \
    SYSCALL_NO_EV(sethostname) \
    SYSCALL_NO_EV(getrusage) \
    SYSCALL_NO_EV(gettimeofday) \
    SYSCALL_NO_EV(settimeofday) \
    SYSCALL_NO_EV(readlink) \
    SYSCALL_NO_EV(swapon) \
    SYSCALL_NO_EV(reboot) \
    SYSCALL_NO_EV(truncate) \
    SYSCALL_NO_EV(ftruncate) \
    SYSCALL_NO_EV(getpriority) \
    SYSCALL_NO_EV(setpriority) \
    SYSCALL_NO_EV(statfs) \
    SYSCALL_NO_EV(fstatfs) \
    SYSCALL_NO_EV(setitimer) \
    SYSCALL_NO_EV(getitimer) \
    SYSCALL_NO_EV(uname) \
    SYSCALL_NO_EV(vhangup) \
    SYSCALL_NO_EV(wait4) \
    SYSCALL_NO_EV(swapoff) \
    SYSCALL_NO_EV(sysinfo) \
    SYSCALL_NO_EV(fsync) \
    SYSCALL_NO_EV(setdomainname) \
    SYSCALL_NO_EV(adjtimex) \
    SYSCALL_NO_EV(init_module) \
    SYSCALL_NO_EV(delete_module) \
    SYSCALL_NO_EV(getpgid) \
    SYSCALL_NO_EV(sysfs) \
    SYSCALL_NO_EV(personality) \
    SYSCALL_NO_EV(msync) \
    SYSCALL_NO_EV(getsid) \
    SYSCALL_NO_EV(fdatasync) \
    SYSCALL_NO_EV(sched_setscheduler) \
    SYSCALL_NO_EV(sched_getscheduler) \
    SYSCALL_NO_EV(sched_yield) \
    SYSCALL_NO_EV(sched_get_priority_max) \
    SYSCALL_NO_EV(sched_get_priority_min) \
    SYSCALL_NO_EV(sched_rr_get_interval) \
    SYSCALL_NO_EV(mremap) \
    SYSCALL_NO_EV(prctl) \
    SYSCALL_NO_EV(arch_prctl) \
    SYSCALL_NO_EV(rt_sigaction) \
    SYSCALL_NO_EV(rt_sigprocmask) \
    SYSCALL_NO_EV(rt_sigpending) \
    SYSCALL_NO_EV(rt_sigtimedwait) \
    SYSCALL_NO_EV(rt_sigqueueinfo) \
    SYSCALL_NO_EV(rt_sigsuspend) \
    SYSCALL_NO_EV(capget) \
    SYSCALL_NO_EV(setreuid) \
    SYSCALL_NO_EV(setregid) \
    SYSCALL_NO_EV(getgroups) \
    SYSCALL_NO_EV(setgroups) \
    SYSCALL_NO_EV(fchown) \
    SYSCALL_NO_EV(chown) \
    SYSCALL_NO_EV(setfsuid) \
    SYSCALL_NO_EV(setfsgid) \
    SYSCALL_NO_EV(pivot_root) \
    SYSCALL_NO_EV(mincore) \
    SYSCALL_NO_EV(madvise) \
    SYSCALL_NO_EV(gettid) \
    SYSCALL_NO_EV(setxattr) \
    SYSCALL_NO_EV(lsetxattr) \
    SYSCALL_NO_EV(fsetxattr) \
    SYSCALL_NO_EV(getxattr) \
    SYSCALL_NO_EV(lgetxattr) \
    SYSCALL_NO_EV(fgetxattr) \
    SYSCALL_NO_EV(listxattr) \
    SYSCALL_NO_EV(llistxattr) \
    SYSCALL_NO_EV(flistxattr) \
    SYSCALL_NO_EV(removexattr) \
    SYSCALL_NO_EV(lremovexattr) \
    SYSCALL_NO_EV(fremovexattr) \
    SYSCALL_NO_EV(sched_setaffinity) \
    SYSCALL_NO_EV(sched_getaffinity) \
    SYSCALL_NO_EV(set_thread_area) \
    SYSCALL_NO_EV(get_thread_area) \
    SYSCALL_NO_EV(io_setup) \
    SYSCALL_NO_EV(io_destroy) \
    SYSCALL_NO_EV(io_getevents) \
    SYSCALL_NO_EV(io_submit) \
    SYSCALL_NO_EV(io_cancel) \
    SYSCALL_NO_EV(exit_group) \
    SYSCALL_NO_EV(remap_file_pages) \
    SYSCALL_NO_EV(set_tid_address) \
    SYSCALL_NO_EV(timer_create) \
    SYSCALL_NO_EV(timer_settime) \
    SYSCALL_NO_EV(timer_gettime) \
    SYSCALL_NO_EV(timer_getoverrun) \
    SYSCALL_NO_EV(timer_delete) \
    SYSCALL_NO_EV(clock_settime) \
    SYSCALL_NO_EV(clock_gettime) \
    SYSCALL_NO_EV(clock_getres) \
    SYSCALL_NO_EV(clock_nanosleep) \
    SYSCALL_NO_EV(utimes) \
    SYSCALL_NO_EV(mq_open) \
    SYSCALL_NO_EV(mq_unlink) \
    SYSCALL_NO_EV(mq_timedsend) \
    SYSCALL_NO_EV(mq_timedreceive) \
    SYSCALL_NO_EV(mq_notify) \
    SYSCALL_NO_EV(mq_getsetattr) \
    SYSCALL_NO_EV(kexec_load) \
    SYSCALL_NO_EV(waitid) \
    SYSCALL_NO_EV(add_key) \
    SYSCALL_NO_EV(request_key) \
    SYSCALL_NO_EV(keyctl) \
    SYSCALL_NO_EV(ioprio_set) \
    SYSCALL_NO_EV(ioprio_get) \
    SYSCALL_NO_EV(inotify_add_watch) \
    SYSCALL_NO_EV(inotify_rm_watch) \
    SYSCALL_NO_EV(mknodat) \
    SYSCALL_NO_EV(fchownat) \
    SYSCALL_NO_EV(futimesat) \
    SYSCALL_NO_EV(readlinkat) \
    SYSCALL_NO_EV(faccessat) \
    SYSCALL_NO_EV(set_robust_list) \
    SYSCALL_NO_EV(get_robust_list) \
    SYSCALL_NO_EV(tee) \
    SYSCALL_NO_EV(vmsplice) \
    SYSCALL_NO_EV(getcpu) \
    SYSCALL_NO_EV(epoll_pwait) \
    SYSCALL_NO_EV(utimensat) \
    SYSCALL_NO_EV(timerfd_settime) \
    SYSCALL_NO_EV(timerfd_gettime) \
    SYSCALL_NO_EV(epoll_create1) \
    SYSCALL_NO_EV(rt_tgsigqueueinfo) \
    SYSCALL_NO_EV(perf_event_open) \
    SYSCALL_NO_EV(fanotify_init) \
    SYSCALL_NO_EV(clock_adjtime) \
    SYSCALL_NO_EV(syncfs) \
    SYSCALL_NO_EV(msgsnd) \
    SYSCALL_NO_EV(msgrcv) \
    SYSCALL_NO_EV(msgget) \
    SYSCALL_NO_EV(msgctl) \
    SYSCALL_NO_EV(shmdt) \
    SYSCALL_NO_EV(shmget) \
    SYSCALL_NO_EV(shmctl) \
    SYSCALL_NO_EV(statfs64) \
    SYSCALL_NO_EV(fstatfs64) \
    SYSCALL_NO_EV(fstatat64) \
    SYSCALL_NO_EV(bdflush) \
    SYSCALL_NO_EV(sigprocmask) \
    SYSCALL_NO_EV(ipc) \
    SYSCALL_NO_EV(lstat64) \
    SYSCALL_NO_EV(_newselect) \
    SYSCALL_NO_EV(sgetmask) \
    SYSCALL_NO_EV(ssetmask) \
    SYSCALL_NO_EV(sigpending) \
    SYSCALL_NO_EV(olduname) \
    SYSCALL_NO_EV(umount) \
    SYSCALL_NO_EV(signal) \
    SYSCALL_NO_EV(nice) \
    SYSCALL_NO_EV(stime) \
    SYSCALL_NO_EV(waitpid) \
    SYSCALL_NO_EV(shmat) \
    SYSCALL(rt_sigreturn, `.ppm_code = PPM_SC_SIGRETURN') \
    SYSCALL_NO_EV(fallocate) \
    SYSCALL(newfstatat, `.ppm_code = PPM_SC_NEWFSSTAT') \
    SYSCALL_NO_EV(finit_module) \
    SYSCALL_NO_EV(sigaltstack) \
    SYSCALL_NO_EV(getrandom) \
    SYSCALL_NO_EV(fadvise64)
')

define(`SYSCALL_NO_EV', `SYSCALL($1, `.ppm_code = translit(PPM_SC_$1, [a-z], [A-Z])')')

const struct syscall_evt_pair g_syscall_table[SYSCALL_TABLE_SIZE] = {
define(`SYSCALL', `
#ifdef __NR_$1
	[__NR_$1 - SYSCALL_TABLE_ID0] = { $2 },
#endif
')
define(`SOCKETCALL', `
#ifndef __NR_socketcall
	[__NR_$1 - SYSCALL_TABLE_ID0] = { $2 },
#endif
')

    X_SYSCALLS

undefine(`SYSCALL')
undefine(`SOCKETCALL')
};

#ifdef CONFIG_IA32_EMULATION
const struct syscall_evt_pair g_syscall_ia32_table[SYSCALL_TABLE_SIZE] = {
define(`SYSCALL', `
#ifdef __NR_ia32_$1
	[__NR_ia32_$1 - SYSCALL_TABLE_ID0] = { $2 },
#endif
')
define(`SOCKETCALL', `
#ifndef __NR_ia32_socketcall
	[__NR_ia32_$1 - SYSCALL_TABLE_ID0] = { $2 },
#endif
')

    X_SYSCALLS

undefine(`SYSCALL')
undefine(`SOCKETCALL')
};
#endif

undefine(`SYSCALL_NO_EV')
